[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Andrei Stoica",
    "section": "",
    "text": "Github\n  \n  \n    \n     LinkedIn\n  \n\n      \n\nEducation\nMaster of Science - Computer Science | Ontario Tech University  2022 | Oshawa, ON\nBachelor of Science - Computer Science | Ontario Tech University  2018 | Oshawa, ON\n\n\n    \n  \n\n\n\nWork Experience\nData Engineer (contract) | The Block Crypto  Aug. 2022 - April 2023 | New York, NY\n\nbuild data pipelines that extract data from 16 exchanges (Airflow)\nclean data from api and normalize currency (Pandas)\nwarhouse data on AWS (S3, Redshift)\ncolaborate with research team to eusure data quality\non call for unexpected pipeline failures\n\nGraduate Research Assistant | Ontario Tech University  May 2018 - Aug. 2020 | Oshawa, ON\n\nNLP Relational Queries And Its Applications\n\nSomething Goes here\n\nScalable Analysis of Open Data Graphs\n\nSomething Goes here\n\nCanadian Political Twitter Analysis\n\ntrack public sentiment toward political parties\ningetst tweets via twitter api\nstream tweets that mention party members\ndata storage via PostgreSQL\nSomething about visualization goes here\n\n\n\n\nCDNPoli\n\ningest data via twitter api\nstream tweets that mention party members\n\ncalculate sentiment of tweets (TF, sk-learn)\n\ndatastore via PostgreSQL\n\nOpenDataGraph\n\nGCP Dataproc(Spark)\npyspark\ndistributed compute to analyze similarity graph\nlarge open dataset\n\nNLP/SQL\n\nperform opperations for NLP in PostgreSQL:\n\nperform text normalization\nperform tokenization\ntext embeding\nsimilarity of documents\n\n\n\n\n\nProject Experience\nNLP Relational Queries And Its Applications (2020) Thesis Project\n\nStoica, Andrei, Ken Q Pu, and Heidar Davoudi. 2020. “NLP Relational Queries and Its Application.” In 2020 IEEE 21st International Conference on Information Reuse and Integration for Data Science (IRI), 395–98. IEEE.\n\nDeveloped LDA extension to PostgreSQL to allow Topic Modelling of text columns inside of SQL\nCreated a web front end to visualize the change in topics over time for academic authors and venues\nPublished 2020 IEEE International Conference on Information Reuse and Integration for Data Science\nTechnologies : Python · SQL/PostgreSQL · Flask · HTML · CSS · D3.js\n\nScalable Analysis of Open Data Graphs (2019)\n\nStoica, Andrei, Michael Valdron, and Ken Pu. 2019. “Scalable Analysis of Open Data Graphs.” In 2019 IEEE 20th International Conference on Information Reuse and Integration for Data Science (IRI), 334–41. IEEE.\n\nPerformed analysis of similarities between documents through Canada’s Open Data portal\nProvided insight into organization and connectedness of Canada’s Open Data\nScalable and Distributed code base to allow for large dataset and scaling with time\nPublished and Presented at 2019 IEEE International Conference on Information Reuse and Integration for Data Science\nTechnologies : Python · SQL/PostgreSQL · Apache · Spark/PySpark · Matplotlib · GCP Storage · GCP Dataproc\n\nCanadian Political Twitter Analysis\n\nBuilt tools to track and analyse the conversation surrounding Canadian politics on Twitter\nTracked key figures and CDNPoli hashtag and predicted standings in 2019 election\nTechnologies : Python · Tensorflow · SQL/PostgreSQL · Matplotlib"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Personal",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Andrei Stoica",
    "section": "",
    "text": "Master of Science - Computer Science | 2022  Ontario Tech University | Oshawa, ON\nBachelor of Science - Computer Science | 2018  Ontario Tech University | Oshawa, ON"
  },
  {
    "objectID": "resume.html#education",
    "href": "resume.html#education",
    "title": "Andrei Stoica",
    "section": "",
    "text": "Master of Science - Computer Science | 2022  Ontario Tech University | Oshawa, ON\nBachelor of Science - Computer Science | 2018  Ontario Tech University | Oshawa, ON"
  },
  {
    "objectID": "resume.html#experience",
    "href": "resume.html#experience",
    "title": "Finley Malloc",
    "section": "",
    "text": "Wengo Analytics | Head Data Scientist | April 2018 - present\nGeoScynce | Chief Analyst | Sept 2012 - April 2018"
  },
  {
    "objectID": "resume.html#work-experience",
    "href": "resume.html#work-experience",
    "title": "Andrei Stoica",
    "section": "Work Experience",
    "text": "Work Experience\nData Engineer (contract) | Aug. 2022 - April 2023  The Block Crypto | Remote\n\nBuild and maintain data pipelines to aid the research team in better making sense of the crypto landscape\nCollaborate with research and engineering teams to ensure data quality and stability of pipelines\nTechnologies : Python · Pandas · SQL · Apache Airflow · Amazon Web Services (AWS) · Redshift\n\nGraduate Research Assistant | May 2018 - Aug. 2020  Ontario Tech University, Oshawa, ON\n\nLead the research on text mining and natural language processing queries in relational databases\nTopics and Technologies used : PostgreSQL · topic modelling · NLP · Python web services"
  },
  {
    "objectID": "resume.html#software-development-experience",
    "href": "resume.html#software-development-experience",
    "title": "Andrei Stoica",
    "section": "Software Development Experience",
    "text": "Software Development Experience\nPrograming : Python · Java · Clojure and ClojureScript · C/C++ · Kotlin · Scala\nData Science : Numpy · Scipy · NLTK · Gensim · Pandas · Ipython Notebooks\nDatabase : PostgreSQL · MongoDB · Redshift\nWeb Serices : Flask · NodeJS\nWeb Frontend : HTML · CSS · ClojureScript · JavaScript · Reagent · React · JQuery\nML/AI : Tensorflow · scikit-learn · word2vec · fasttext\nTool : Jira · Confluence · Git"
  },
  {
    "objectID": "resume.html#project-experience",
    "href": "resume.html#project-experience",
    "title": "Andrei Stoica",
    "section": "Project Experience",
    "text": "Project Experience\nNLP Relational Queries And Its Applications Thesis Project\n\nDeveloped LDA extension to PostgreSQL to allow Topic Modelling of text columns inside of SQL\nCreated a web front end to visualize the change in topics over time for academic authors and venues\nPublished 2020 IEEE International Conference on Information Reuse and Integration for Data Science\nTechnologies : Python · SQL/PostgreSQL · Flask · HTML · CSS · D3.js\n\nScalable Analysis of Open Data Graphs\n\nPerformed analysis of similarities between documents through Canada’s Open Data portal\nProvided insight into organization and connectedness of Canada’s Open Data\nScalable and Distributed code base to allow for large dataset and scaling with time\nPublished and Presented at 2019 IEEE International Conference on Information Reuse and Integration for Data Science\nTechnologies : Python · SQL/PostgreSQL · Apache · Spark/PySpark · Matplotlib · GCP Storage · GCP Dataproc\n\nCanadian Political Twitter Analysis\n\nBuilt tools to track and analyse the conversation surrounding Canadian politics on Twitter\nTracked key figures and CDNPoli hashtag and predicted standings in 2019 election\nTechnologies : Python · Tensorflow · SQL/PostgreSQL · Matplotlib"
  },
  {
    "objectID": "resume.html#publications",
    "href": "resume.html#publications",
    "title": "Andrei Stoica",
    "section": "Publications",
    "text": "Publications\nStoica, A., K. Pu, and H. Davoudi (2020). “NLP Relational Queries And Its Applications”. In: 2020 IEEE 21th International Conference on Information Reuse and Integration for Data Science (IRI).pp. 395–398. DOI: 10.1109/IRI49571.2020.00064\nStoica, A., M. Valdron, and K. Pu (2019). “Scalable Analysis of Open Data Graphs”. In: 2019 IEEE 20th International Conference on Information Reuse and Integration for Data Science (IRI), pp. 334–341. DOI: 10.1109/IRI.2019.00059."
  },
  {
    "objectID": "resume.html#hobbies",
    "href": "resume.html#hobbies",
    "title": "Andrei Stoica",
    "section": "Hobbies",
    "text": "Hobbies\nFree and open source software enthusiast Maintain a home media and storage server for family running the latest Ubuntu LTS Build computers for others, source and consult on components required, install and teach them to install themselves"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Andrei Stoica",
    "section": "Education",
    "text": "Education\nMaster of Science - Computer Science | 2022  Ontario Tech University | Oshawa, ON\nBachelor of Science - Computer Science | 2018  Ontario Tech University | Oshawa, ON"
  },
  {
    "objectID": "about.html#work-experience",
    "href": "about.html#work-experience",
    "title": "Andrei Stoica",
    "section": "Work Experience",
    "text": "Work Experience\nData Engineer (contract) | Aug. 2022 - April 2023  The Block Crypto | Remote\n\nBuild and maintain data pipelines to aid the research team in better making sense of the crypto landscape\nCollaborate with research and engineering teams to ensure data quality and stability of pipelines\nTechnologies : Python · Pandas · SQL · Apache Airflow · Amazon Web Services (AWS) · Redshift\n\nGraduate Research Assistant | May 2018 - Aug. 2020  Ontario Tech University, Oshawa, ON\n\nLead the research on text mining and natural language processing queries in relational databases\nTopics and Technologies used : PostgreSQL · topic modelling · NLP · Python web services"
  },
  {
    "objectID": "about.html#software-development-experience",
    "href": "about.html#software-development-experience",
    "title": "Andrei Stoica",
    "section": "Software Development Experience",
    "text": "Software Development Experience\nPrograming : Python · Java · Clojure and ClojureScript · C/C++ · Kotlin · Scala\nData Science : Numpy · Scipy · NLTK · Gensim · Pandas · Ipython Notebooks\nDatabase : PostgreSQL · MongoDB · Redshift\nWeb Serices : Flask · NodeJS\nWeb Frontend : HTML · CSS · ClojureScript · JavaScript · Reagent · React · JQuery\nML/AI : Tensorflow · scikit-learn · word2vec · fasttext\nTool : Jira · Confluence · Git"
  },
  {
    "objectID": "about.html#project-experience",
    "href": "about.html#project-experience",
    "title": "Andrei Stoica",
    "section": "Project Experience",
    "text": "Project Experience\nNLP Relational Queries And Its Applications Thesis Project\n\nDeveloped LDA extension to PostgreSQL to allow Topic Modelling of text columns inside of SQL\nCreated a web front end to visualize the change in topics over time for academic authors and venues\nPublished 2020 IEEE International Conference on Information Reuse and Integration for Data Science (2020)\nTechnologies : Python · SQL/PostgreSQL · Flask · HTML · CSS · D3.js\n\n\nStoica, Andrei, Ken Q Pu, and Heidar Davoudi. 2020. “NLP Relational Queries and Its Application.” In 2020 IEEE 21st International Conference on Information Reuse and Integration for Data Science (IRI), 395–98. IEEE.\nScalable Analysis of Open Data Graphs\n\nPerformed analysis of similarities between documents through Canada’s Open Data portal\nProvided insight into organization and connectedness of Canada’s Open Data\nScalable and Distributed code base to allow for large dataset and scaling with time\nPublished and Presented at 2019 IEEE International Conference on Information Reuse and Integration for Data Science (2019)\nTechnologies : Python · SQL/PostgreSQL · Apache · Spark/PySpark · Matplotlib · GCP Storage · GCP Dataproc\n\n\nStoica, Andrei, Michael Valdron, and Ken Pu. 2019. “Scalable Analysis of Open Data Graphs.” In 2019 IEEE 20th International Conference on Information Reuse and Integration for Data Science (IRI), 334–41. IEEE.\nCanadian Political Twitter Analysis\n\nBuilt tools to track and analyse the conversation surrounding Canadian politics on Twitter\nTracked key figures and CDNPoli hashtag and predicted standings in 2019 election\nTechnologies : Python · Tensorflow · SQL/PostgreSQL · Matplotlib"
  },
  {
    "objectID": "about.html#publications",
    "href": "about.html#publications",
    "title": "Andrei Stoica",
    "section": "Publications",
    "text": "Publications\nStoica, A., K. Pu, and H. Davoudi (2020). “NLP Relational Queries And Its Applications”. In: 2020 IEEE 21th International Conference on Information Reuse and Integration for Data Science (IRI).pp. 395–398. DOI: 10.1109/IRI49571.2020.00064\nStoica, A., M. Valdron, and K. Pu (2019). “Scalable Analysis of Open Data Graphs”. In: 2019 IEEE 20th International Conference on Information Reuse and Integration for Data Science (IRI), pp. 334–341. DOI: 10.1109/IRI.2019.00059."
  },
  {
    "objectID": "posts/2030-01-01-Wornders-of-templates.html",
    "href": "posts/2030-01-01-Wornders-of-templates.html",
    "title": "Andrei Stoica",
    "section": "",
    "text": "{:title “The Wonders of Templates” :tags [“template” “clojure” “automation”]}\nThroughout the many iterations of this site I’ve never felt like I’ve fully taken advantage of templating features offered by the tools with which I was working. For example, My last site was built using Hugo to generate the static html based on a template. However I never strayed too far from the original template.\nThis time I decided to change it up. For starters, I decided to use Cryogen for the static page generation. It’s a Clojure library and ships as a template for Leiningen, one of the most popular build tools for Clojure. Cryogen takes care of a whole lot out of the box. It can do RSS feeds, link your post and even generate tags so that you’re posts can be navigated more easily. Not to mention it comes with a few templates. Best of all, you can get started with one simple command.lein new crygen my-site Out of the box it creates a nice looking site. Taking a bit of inspiration from the layout of the default template I set out to create my own. I never did have much of an eye for design.\nCryogen uses Selmer for templating. Yet another Clojure library. Luckily this library is inspired by Django. So if you’ve had any experience with Django you should feel at home. Unfortunately my experience with Django isn’t extensive so I had a bit to learn there too. All of these barriers are easy to overcome.\nCreating the general template for the website was straightforward if you look up examples and/or tutorials for Django. You can follow them almost to the dot as you’re learning with some small differences such as the filters. That’s not what I was looking to dive deeper on. I wanted to turn my resume into a templated page. My goal was to make a system that would take a file that contains all of the data then create templates to create different versions of it. With this I have taken first steps to accomplish this.\nBefore this, my resume has existed in Latex then I had to translate that information manually to old website(which was also built using a static site generation tool that used markdown). Luckily, now I can store the content of my resume in a single format and then use two separate templates to generate the HTML and Latex versions. For the time being only focusing on the HTML and leaving my Latex version unchanged.\nSince this new website was built using a Clojure library, the data was stored in Clojure’s native edn format. This makes it easy to load with clojure because it is just a Clojure data structure in text form. A map stores key-value pairs for each of the sections of a resume. For example, a section listing my education would look something like this: edn  {:edu [{:title \"Bachelor of Science - Computer Science\"          :date \"2018\"          :location \"Ontario Tech University, Oshawa, ON\"}         {:title \"Master of Science - Computer Science\"          :date \"Expected Completion 2021\"          :location \"Ontario Tech University, Oshawa, ON\"}]} This is just an example of the simplest section in my resume. Each element in the section is represented by a map. For more complicated, we can simply add more keys to this map. then we can modify our template to handles those specific keys only for that section.\nI chose to store this information in a separate edn file to allow for reuse of that file for generating the Latex version. However, with Cryogen each page has a map associated with it and you can specify keys and values at the top of our markdown. The file used to generate a page with the information from above looks something like this:\n{:title \"Resume - postproccesing\"\n :layout :page\n :page-index 0\n :my/postprocess? true\n :edu [{:title \"Bachelor of Science - Computer Science\"\n        :date \"2018\"\n        :location \"Ontario Tech University, Oshawa, ON\"}\n       {:title \"Master of Science - Computer Science\"\n        :date \"Expected Completion 2021\"\n        :location \"Ontario Tech University, Oshawa, ON\"}]}\n\nEducation\n---------\n{% for event in edu %}\n&lt;div class=\"container event\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"title\"&gt;{{event.title}}&lt;/div&gt;\n        &lt;div class=\"date\"&gt;{{event.date}}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"location\"&gt;{{event.location}}&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endfor %}\nThis can be a little hard to read because it is a mix of clojure, markdown, selmer and html. First you have the clojure map that contains the metadata for this page. This a a mix of keys for Cryogen and a couple of keys for us to use when rendering the rest of the selmer in our page. Next comes the heading for the education section and this is turned into a heading by the markdown renderer built into Cryogen. The last bit is a for selmer for loop that renders our list into html. Now we can use custom divs and style them any way we want. For example having the title and date on the same line, left and right justified respectively.\nGoing back to the metadata, I’ve added two custom keys to that map. The obvious one is :edu but the second one is :my/postprocces?. We will modify Cryogen to check the :my/postprocces? key and add render any additional selmer we write in our markdown using the other keys provided in our metadata. We could have also written html directly inside our markdown and bypassed selmer all together. That the exact strategy I used when creating the last iteration of this site. Now we are moving away from that.\nThe next step is to modify our clojure code to check for this key and provide the correct keys to render our data."
  },
  {
    "objectID": "posts/2024-03-10-personal-task-managment.html",
    "href": "posts/2024-03-10-personal-task-managment.html",
    "title": "Personal Task Managment",
    "section": "",
    "text": "When I was younger and all the things I needed to complete were able to fit in my head, I was always confused by people who wrote things down, made lists and crossed them off methodically. I kept hearing about how writing things down with systems like the bullet journal or obsidian helped people clear their minds. Things didn’t seem that complicated to me. Everything could fit in my head and the few things that had hard due dates went into my calender. All these systems I heard of just had too much going on. I had to memorize the system on top of what I already had going on in my head.\nWhat I didn’t realize at the time was that whatever system you use has to be personal to you. The system you use needs to fill in you’re personal week spots. It needs to be a foundation that you can lean on when your floor starts to shift. What I was hearing when learning about all of these systems was “what people are doing” and “how it helped.” The important part of learning a new system is the “why am I doing this.” The why is the key piece that informs how useful it can be for you. As I gain more experience, I learn to focus less on “whats” and “hows” and more on “whys.”\nThe most important part of personal task management is only the personal part. Some of you might always want a pen and a list folded in your pocket. Some might want a fancy to-do app with notifications and reminders. Other’s might just use the notes app that came with your phone. The important part is that you use it when you need it. No need to have it written down if you just forget the thing at home or worse you remember the paper but forget the damn pen. Or the other way around, either way, it somehow feels worse than forgetting both.\nFor me, most of the things I need to get done happen on the computer. So that’s where I like to keep my list. This has the bonus that when I get up from my computer I stop thinking about my list of tasks. However, when I am seated at my desk access I can access them in a few seconds no matter what I am doing.\nThe system itself is heavily inspired by the bullet journal, which I tried to do with a physical journal but I found it just sat in my bag untouched after a while. But, I did start categorizing tasks after that experience. My 3 categories for tasks are daily, weekly and monthly. These aren’t hard deadlines. They roughly equate to things that need to be done now, things that are waiting on something else to finish first or are scheduled and things that I need to start contemplating but not doing. I find that if I don’t put any deadlines on tasks, they don’t get done. If everything has a due date they can overwhelm me. With the combination of these 3 groups, I can focus on the imminent task, forget about the ones that are blocked and free up time for those that are around the corner.\nCombined with the fact that I can open it without taking my hands off of the keyboard while working means I am more likely to use the system. Therefore, the system is more likely to be effective.\nI prefer to work in the terminal so I made a system that fits into that workflow. If I type todo in any terminal on my systems, it will open todays file. If that file doesn’t exist, it will take the last file I created, strip any done tasks and create this new file. The files themselves are markdown. The editor I configurable, I was using VSCode for a while but I’m currently using neovim. The tools I use change a lot depending on my day-to-day tasks so I wanted this to work with whatever editor I choose to use in the future. For now, I like the speed of neovim.\nThe last key to my puzzle is making it available when I am not in a terminal. That’s where a dropdown terminal steps in. Currently, I use Guake and can open it with &lt;F12&gt;. If I don’t already have it open I can type todo to open today’s tasks. Usually, I already have it open as I’m working through tasks on the list and it’s only a matter of opening the dropdown terminal to cross things off and pick the next thing to do. If I ever start using graphical editors that day-to-day, this could also work with a key bind that runs todo and configuring the utility to open VSCode.\nI’ve written this utility to handle the files and open whatever editor I’m currently. First in Python then I rewrote it when I started to learn Rust. The rust version can be found here\nHopefully, there is something you can use here to improve your own system. Mine is constently evolving. I am currently thinking about adding a new section to my todo file for notes, and an option in the utility to open the previous day’s files via a flag. That way I can write notes and reference them later. I’m also trying out Obsidian for something like however I don’t think it would be beneficial to have this split among 2 apps. Another feature I thought could be useful was to calculate what percentage of tasks get carried over from day to day. Mapping out my productivity like this could be insightful but I don’t think I doubt it would have the intended effect on me.\nThe only way I will know how useful any of this can be is to implement it. Then check back in a month or 2 and the properly useful tools will stay in my workflow while the rest will be uninstalled from my machine. I look forward to trying another system in the future and improving my workflow even further."
  },
  {
    "objectID": "posts/2021-07-23-Welcome.html",
    "href": "posts/2021-07-23-Welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Hello World!\nWelcome to my new personal website! This will act as a outlet for the random project that my ADHD brain starts. Starting with some of what I learned from setting up this website itself.\nI am currently pursuing a Masters in Computer Science, supervised by Dr Ken Pu. My work focuses on text mining and natural language processing queries in relational databases.\nThis site also host my resume and links to my profiles on other platforms.\nStay tuned for more, Andrei"
  },
  {
    "objectID": "posts/2023-06-20-Rustlings-takeaway.html",
    "href": "posts/2023-06-20-Rustlings-takeaway.html",
    "title": "Rust has a lot to teach other languages",
    "section": "",
    "text": "Recently, I decided to pick up Rust. While I’m not yet 100% comfortable with the language, I have had one major takeaway from the experience. The new developer experience for all other languages is trash!\nWe all know the saying “Necessity is the mother of invention”, but man does it ever ring true here. It’s clear! Rust being as hard as it is to learn forced that team to create the best possible introduction to it. When you go to the Rust-Lang website there are three ways to get started under the learning tab.\nFirst, there is “Read the book”. There are plenty of books that serve as introductions to programming languages. This isn’t the interesting part. However, I did find this well written with good example code and I do recommend people at least skim this and probably use it as a supplement to the other learning methods I will mention later.\nNext is the “Rustlings” course. Here is where it gets interesting. This is an interactive course where you are given a program that doesn’t compile and you need to determine how to fix it. There are exercises for starting with variables and control flow and going all the way up to error handling, generics and unique rust features like traits and lifetimes.\nTo run through the exercises you can clone the repo and install it with Rust’s package manager. Then running rustlings watch will automatically compile the exercise code and run it for you. Each exercise has a line that you will need to remove to move on to the next exercise. This can allow you to play around with different solutions once you have completed an exercise.\nI found this sort of compiler-driven teaching style very effective at getting me familiar with not only the language itself but also the compiler and the resources to reference when I encounter other problems down the line. When you are stuck, the course has a help command that you can run. This will point you to the correct resource for that exercise. Additionally, there is a readme that links each of the sections of the course to the accompanying section in the book.\nThe last option they offer for getting started is “Rust by Example”. Here there are listing with example code for many different tasks. Again this could be anything from a simple hello world to the complicated rust specific features like traits and lifetimes. But it also contains testing and examples from the standard library. This will be a more useful resource later when trying to use the standard library and building some larger projects.\nIn my opinion, the real star of the show here is Rustlings. The fact that it forces you to install and familiarize yourself with the tool you will be using from day 0 is beautiful. While there are books that walk you through all of the same things for other languages and similar courses online are available, this is the first time I’ve seen something like this from the developers of the language itself. Additionally, this is all freely available on GitHub and their website.\nWhen you’re done with the course and need to dive deeper they also have links on that same page for: - standard library - differences between editions - package manager - documenting your code - the compiler\nas well as application specific books: - command line application - webassembly - embedded programming\nAgain all of this is FREE on the language’s website. This is not only a great beginner introduction but it also gives you great ideas for projects to boost your proficiency after you get your footing.\nIn 2023, it’s nice to see a language taking the newcomer experience so seriously and thinking about the path to proficiency. I think this sort of system for learning would benefit other languages and would love to see it mirrored.\nI think most people would agree that Clojure is another modern language that can be difficult to learn. Despite it being similarly difficult, the newcomer experience is nowhere near as nice. One thing both of these share is the ability to use the language right in the browser. That’s nice but it still doesn’t get you familiar with the rest of the ecosystem and the compiler. If you even want a tool to help manage the dependencies of your project, you’ll have to find your way to Leiningen on your own somehow. Now let’s look at how the Clojure maintainers expect a new person to learn. Under the “How do I learn the language” section, there is a basic written guide introducing you to the language akin to the book that Rust provides. Next, there are 4 books that you can pay money for. A set of problems you can solve interactive in the browser. There is a course you can sign up for that also has mentors.\nI’m not saying these are bad options to start on a new language. For those who prefer learning from books, I’m sure it works. For those who can afford to buy the books, I’m sure it works. But for students, for those between jobs, the fact that Rust offers such a comprehensive view of the ecosystem for free is fantastic.\nI find that following examples from a book doesn’t put me in the same exploratory mind space as the Rustlings course did. With a book in front of you, the answer is always there as well. Further down the page or on the following one. All you need to do is keep reading. With the course, you need to explore to find the solution. When you find it, you’re already thinking of other possible solutions. This encourages you to keep thinking. Running the help command points you to the right answer but doesn’t hand it to you. It still forces you to process and understand the documentation The fact that you need to swap your attention from the editor to a browser means that you are less likely to do it since it requires a context switch. With the book method, you are already encouraged to switch back and forth so it’s no big deal to do it one more time.\nIf you haven’t done so already, check out the Learn page of the Rust website. It is a lesson in making that is notoriously difficult accessible. Other languages, new and old, should take a lesson from their playbook."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Rust has a lot to teach other languages\n\n\n\n\n\n\nrust\n\n\nlearning\n\n\n\n\n\n\n\n\n\nJun 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\n\nwelcome\n\n\n\n\n\n\n\n\n\nJul 23, 2021\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/nlp-queries.html",
    "href": "projects/nlp-queries.html",
    "title": "NLP Relational Queries And Its Applications",
    "section": "",
    "text": "Thesis"
  },
  {
    "objectID": "projects/cdn-poli.html",
    "href": "projects/cdn-poli.html",
    "title": "Canadian Political Twitter Analysis",
    "section": "",
    "text": "CDN POLI"
  },
  {
    "objectID": "projects/open-data-graph.html",
    "href": "projects/open-data-graph.html",
    "title": "Scalable Analysis of Open Data Graphs",
    "section": "",
    "text": "data graphs"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Canadian Political Twitter Analysis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNLP Relational Queries And Its Applications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScalable Analysis of Open Data Graphs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#projects",
    "href": "index.html#projects",
    "title": "Personal",
    "section": "Projects",
    "text": "Projects"
  },
  {
    "objectID": "draft/2024-03-10-personal-task-managment.html",
    "href": "draft/2024-03-10-personal-task-managment.html",
    "title": "Personal Task Managment",
    "section": "",
    "text": "When I was younger and all the things I needed to complete were able to fit in my head, I was always confused by people who wrote things down, made lists and crossed them off methodically. I kept hearing about how writing things down with systems like the bullet journal or obsidian helped people clear their minds. Things didn’t seem that complicated to me. Everything could fit in my head and the few things that had hard due dates went into my calender. All these systems I heard of just had too much going on. I had to memorize the system on top of what I already had going on in my head.\nWhat I didn’t realize at the time was that whatever system you use has to be personal to you. The system you use needs to fill in you’re personal week spots. It needs to be a foundation that you can lean on when your floor starts to shift. What I was hearing when learning about all of these systems was “what people are doing” and “how it helped.” The important part of learning a new system is the “why am I doing this.” The why is the key piece that informs how useful it can be for you. As I gain more experience, I learn to focus less on “whats” and “hows” and more on “whys.”\nThe most important part of personal task management is only the personal part. Some of you might always want a pen and a list folded in your pocket. Some might want a fancy to-do app with notifications and reminders. Other’s might just use the notes app that came with your phone. The important part is that you use it when you need it. No need to have it written down if you just forget the thing at home or worse you remember the paper but forget the damn pen. Or the other way around, either way, it somehow feels worse than forgetting both.\nFor me, most of the things I need to get done happen on the computer. So that’s where I like to keep my list. This has the bonus that when I get up from my computer I stop thinking about my list of tasks. However, when I am seated at my desk access I can access them in a few seconds no matter what I am doing.\nThe system itself is heavily inspired by the bullet journal, which I tried to do with a physical journal but I found it just sat in my bag untouched after a while. But, I did start categorizing tasks after that experience. My 3 categories for tasks are daily, weekly and monthly. These aren’t hard deadlines. They roughly equate to things that need to be done now, things that are waiting on something else to finish first or are scheduled and things that I need to start contemplating but not doing. I find that if I don’t put any deadlines on tasks, they don’t get done. If everything has a due date they can overwhelm me. With the combination of these 3 groups, I can focus on the imminent task, forget about the ones that are blocked and free up time for those that are around the corner.\nCombined with the fact that I can open it without taking my hands off of the keyboard while working means I am more likely to use the system. Therefore, the system is more likely to be effective.\nI prefer to work in the terminal so I made a system that fits into that workflow. If I type todo in any terminal on my systems, it will open today’s file. If that file doesn’t exist, it will take the last file I created, strip any done tasks and create this new file. The files themselves are markdown. The editor I configurable, I was using VSCode for a while but I’m currently using neovim. The tools I use change a lot depending on my day-to-day tasks so I wanted this to work with whatever editor I choose to use in the future. For now, I like the speed of neovim.\nThe last key to my puzzle is making it available when I am not in a terminal. That’s where a dropdown terminal steps in. Currently, I use Guake and can open it with &lt;F12&gt;. If I don’t already have it open I can type todo to open today’s tasks. Usually, I already have it open as I’m working through tasks on the list and it’s only a matter of opening the dropdown terminal to cross things off and pick the next thing to do. If I ever start using graphical editors that day-to-day, this could also work with a key bind that runs todo and configuring the utility to open VSCode.\nI’ve written this utility to handle the files and open whatever editor I’m currently. First in Python then I rewrote it when I started to learn Rust. The rust version can be found here\nHopefully, there is something you can use here to improve your own system. Mine is constently evolving. I am currently thinking about adding a new section to my todo file for notes, and an option in the utility to open the previous day’s files via a flag. That way I can write notes and reference them later. I’m also trying out Obsidian for something like however I don’t think it would be beneficial to have this split among 2 apps. Another feature I thought could be useful was to calculate what percentage of tasks get carried over from day to day. Mapping out my productivity like this could be insightful but I don’t think I doubt it would have the intended effect on me.\nThe only way I will know how useful any of this can be is to implement it. Then check back in a month or 2 and the properly useful tools will stay in my workflow while the rest will be uninstalled from my machine. I look forward to trying another system in the future and improving my workflow even further."
  }
]